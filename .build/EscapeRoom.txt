ENTITY FRAMEWORK CORE
Pacchetti nuget:
-dotnet add package Microsoft.EntityFrameworkCore.SqlServer
-dotnet add package Microsoft.EntityFrameworkCore.Tools
-dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore.


SOLUZIONE: 

EscapeRoomGame
│
├── Controllers (Nei controller, puoi iniettare i servizi e utilizzarli per gestire le operazioni)
│   ├── RoomController.cs
│   ├── PlayerController.cs
│   ├── PuzzleController.cs
│   └── AccountController.cs
│
├── Models
│   ├── Player.cs
│   ├── Room.cs
│   ├── Puzzle.cs
│   └── PlayerPuzzleProgress.cs
│
├── Services (sono simi ai DAO per l'interazione con il DB. Crea stanza eccetera).
│   ├── RoomService.cs
│   ├── PlayerService.cs
│   └── PuzzleService.cs
│
├── Data
│   ├── EscapeRoomContext.cs (estende DbContext; DbSet<Entità>; gestione relazioni)
│   └── Migrations (crea le tabelle)
│
├── Views
│   ├── Room
│   │   ├── Index.cshtml
│   │   └── EnterRoom.cshtml
│   ├── Player
│   │   ├── Profile.cshtml
│   │   └── Login.cshtml
│   └── Puzzle
│       └── PuzzleDetails.cshtml
│
└── appsettings.json (stringa di connessione db)


CLASSI:
public class Player
{
    public int Id { get; set; }
    public string Username { get; set; }
    public string Email { get; set; }
    public int Progresso { get; set; }
    public DateTime CreatedAt { get; set; }
}

public class Room
{
    public int Id { get; set; }
    public string Nome { get; set; }
    public string Descrizione { get; set; }
    public int RoomOrder { get; set; }
}

public class Puzzle
{
    public int Id { get; set; }
    public int RoomId { get; set; }
    public Room Room { get; set; }
    public string Descrizione { get; set; }
    public string Soluzione { get; set; }
}

public class PlayerPuzzleProgress
{
    public int Id { get; set; }
    public int PlayerId { get; set; }
    public Player Player { get; set; }
    public int PuzzleId { get; set; }
    public Puzzle Puzzle { get; set; }
    public bool Risolto { get; set; }
}


DBCONTEXT:
public class EscapeRoomContext : DbContext
{
    public DbSet<Player> Players { get; set; }
    public DbSet<Room> Rooms { get; set; }
    public DbSet<Puzzle> Puzzles { get; set; }
    public DbSet<PlayerPuzzleProgress> PlayerPuzzleProgresses { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("YourConnectionString");
    }
}

COME FUNZIONANO I SERVICES E I CONTROLLER:
Ruolo dei Controllers
Gestione delle Richieste:
-I controller sono responsabili di ricevere le richieste HTTP (come GET, POST, PUT, DELETE) dall'interfaccia utente (UI).
-Interazione con i Services:
All'interno dei controller, chiami i metodi dei servizi per eseguire la logica di business. I controller non si occupano direttamente dell'accesso al database; delegano questa responsabilità ai servizi.
-Restituzione della Risposta:
Dopo aver ricevuto i dati dai servizi, i controller preparano e restituiscono le risposte, spesso passando i dati alle view per la visualizzazione.

Ruolo dei Services
-Logica di Business:
I servizi contengono la logica di business necessaria per gestire le operazioni dell'applicazione, come la validazione dei dati, l'applicazione di regole aziendali e la gestione del flusso di lavoro.
-Accesso ai Dati:
I servizi utilizzano i DAO o il DbContext per interagire con il database, eseguendo operazioni CRUD e recuperando i dati necessari.
-Astrazione:
Separano la logica di business dall'accesso ai dati, rendendo il codice più modulare e manutenibile.


FLUSSO DI LAVORO ESEMPIO:
public class PlayerController : Controller
{
    private readonly PlayerService _playerService; //richiama il servizio

    public PlayerController(PlayerService playerService)
    {
        _playerService = playerService;
    }

    public IActionResult Profile(int id)
    {
        var player = _playerService.GetPlayerProfile(id);
        return View(player);
    }
}


public class PlayerService
{
    private readonly EscapeRoomContext _context; //richiama il dbContext

    public PlayerService(EscapeRoomContext context)
    {
        _context = context;
    }

    public Player GetPlayerProfile(int id)
    {
        return _context.Players.Find(id);
    } 
}
------------------------------------------------------------------------------

Parte Admin:
Aggiustare le view per farle piu' belle, Aggiungere la foto del prodotto nella Product List.
Aggiungere navigazione per le varie liste (inventory e Product).

----

Parte Client:
Aggiungere la funzionalita' del carrello, per potere aggiungere il metodo di pagamento e salvarlo.
Aggiungere la navigazione dal carrello al catalogo.


step:

Il metodo di pagamento non esiste come property nello user, quindi bisognerebbe aggiungerlo. Forse e' meglio creare una tabella con i metodi di pagamento con FK dello UserID (la classe User ovviamente deve avere la navigation property, perche' potra avere piu di una carta.)
aggiungere nel MyAccount un bottone per visualizzare il metodo di pagamento esistente (se non c'e', il bottone deve dire "aggiungi metodo di pagamento" invece di visualizza)

una volta che abbiamo un metodo di pagamento, aggiungere i bottoni nel catalogo, per potere aggiungere i prodotti nel carrello, e visualizzare i dettagli del prodotto.












